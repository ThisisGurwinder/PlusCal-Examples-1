-------------------------- MODULE TE4 ---------------------------
EXTENDS Integers, Sequences, TLC
CONSTANTS Msg, RingBufSz
ASSUME RingBufSz \in Int

(******************************************************)
(*     Translation Engine 4 Algorithm Abstraction     *)
(******************************************************)


AppendAll(to, from) == [j \in 1..(Len(to) + Len(from)) |-> IF j <= Len(to) THEN to[j] ELSE from[j-Len(to)]]

(*-------------------------------------------------------------------------*)
(* SendAcks returns a new version of the ack channel,                      *)
(* with the acks vals in from appended to it                               *)
(*    to => seq of uids (ack vals)                                         *)
(*  from => seq of <<uid, msg>>, so this plucks record[1] (the uid/ackval) *)
(*-------------------------------------------------------------------------*)
SendAcks(to, from) == [j \in 1..(Len(to) + Len(from)) |-> IF j <= Len(to) THEN to[j] ELSE from[j-Len(to)][1]]


(***************************************************************************
--algorithm TE4 {
  variables
    qSource = << >>,       \* starting source of messages
    qSentUnacked = << >>,  \* msgs sent from JMS -> Inbounder, but unacked
    ackChan = << >>,       \* acks from Outbounder -> JMS, ack vals == uid
    qSentAcked = << >>,    \* msgs sent from JMS -> Inbounder and acked by Outbounder
    qRingBuffer = << >>,   \* RingBuffer is modeled as a simple FIFO
    qRcvdUnacked = << >>,  \* RingBuf -> Outbounder before acked
    qRcvdAcked = << >>,    \* final sink of messages
    outBatchSize = 4,      \* size of batches as pulled from RingBuffer
    qEmpty = << >>;

  macro CopyAll(to, from) {
    to := AppendAll(to, from);
  }

  macro TransferAll(to, from) {
    to := AppendAll(to, from);
    from := << >>;
  }

  macro TransferOne(to, from) {
    to := Append(to, Head(from));
    from := Tail(from);    
  }
  
  \* transfer (append) all entries on `from` seq to both `to1` and `to2` seqs
  macro DuplexTransferAll(to1, to2, from) {
    to1 := AppendAll(to1, from);
    to2 := AppendAll(to2, from);
    from := << >>;  
  }
  
  \* transfer (append) one entry on `from` seq to both `to1` and `to2` seqs
  macro DuplexTransferOne(to1, to2, from) {
    to1 := Append(to1, Head(from));
    to2 := Append(to2, Head(from));
    from := Tail(from);  
  }

  (*--------------------*)
  (*---- Outbounder ----*)
  (*--------------------*)
  process (Outbounder = "outbounder")
    variables nextEvent; \* ackBuf = << >>, 
  {
  ob1:  while (TRUE) {
          await Len(qRingBuffer) > 0;
          nextEvent := Head(qRingBuffer);
          
          if (nextEvent[1] < 0) { \* simulate BAD_PARSE
            print <<"OUTBOUNDER: BAD_PARSE ++++++++++">>;
            \* pull the bad message off the ringBuffer and put on the ackChan
            qRingBuffer := Tail(qRingBuffer);
            ackChan := Append(ackChan, nextEvent[1]);
          } else {
            \** TODO: need to have multiple sinks and route the output to the correct one ...
            TransferOne(qRcvdUnacked, qRingBuffer);
            
  ob2:      if (((nextEvent[1]) % outBatchSize) = 0) { \* if endOfBatch=true, send acks
              ackChan := SendAcks(ackChan, qRcvdUnacked);
              TransferAll(qRcvdAcked, qRcvdUnacked);
              print <<"qsource:", Len(qSource), "qSentAcked", Len(qSentAcked), "qRcvdAcked", Len(qRcvdAcked)>>;
              assert \A idx \in 1..Len(qRcvdAcked) : (qRcvdAcked[idx][1] = idx);
  \*            if (Len(qRcvdAcked) > 9) {
  \*              print <<"================= qRcvdAcked", qRcvdAcked>>;
  \*            };
            };
          }
        } 
  }; \* end process Outbounder

  (*-------------------*)
  (*---- Inbounder ----*)
  (*-------------------*)
  process (Inbounder = "inbounder") 
  {
  ib1:  while (TRUE) {
          \* TODO: when there are multiple JMSSources, need a `with` clause here to randomly choose one
          await Len(qSource) > 0 /\ Len(qRingBuffer) < RingBufSz;  \* could increase to larger # to ensure batching

          (* get messages from JMSSource -> RingBuffer *)
          if ( (RingBufSz - Len(qRingBuffer)) >= Len(qSentUnacked) ) {
            DuplexTransferAll(qSentUnacked, qRingBuffer, qSource);
          } else {
            DuplexTransferOne(qSentUnacked, qRingBuffer, qSource);
          };
        }
  };  \* end process Inbounder


  (*--------------------*)
  (*---- JMS Source ----*)
  (*--------------------*)  
  process (JMSSource = "jmsSource")  \* TODO: there can be multiples of these
    variables uid = 1, inmsg, ack;
  {
  js1:  while (TRUE) {
          either with (msg \in Msg) {
            (* JMS queue receives messages from unspecified upstream system (Live) *)
            qSource := Append(qSource, <<uid, msg>>);
            uid := uid + 1;

          } or with (msg \in Msg) {
            (* JMS queue bad receives messages from unspecified upstream system (Live) *)
            await (uid % 4 = 0);
            \* negative UID indicates "BAD_PARSE"
            qSource := Append(qSource, <<-100, msg>>);
            
          } or {
            (* read acks from Outbounder *)
            await Len(ackChan) > 0;
            ack := Head(ackChan);
            ackChan := Tail(ackChan);
            inmsg := Head(qSentUnacked);
            \* ensure that acks return in order and match next unacked msg
            if (ack >= 0) {
              assert ack = inmsg[1];
            };
            TransferOne(qSentAcked, qSentUnacked);
            
\*          qSentUnacked := Tail(qSentUnacked);
\*          qSentAcked := Append(qSentAcked, inmsg);
          };
        }
  }; \* end process JMSSource
}

****************************************************************************)
\* BEGIN TRANSLATION
CONSTANT defaultInitValue
VARIABLES qSource, qSentUnacked, ackChan, qSentAcked, qRingBuffer, 
          qRcvdUnacked, qRcvdAcked, outBatchSize, qEmpty, pc, nextEvent, uid, 
          inmsg, ack

vars == << qSource, qSentUnacked, ackChan, qSentAcked, qRingBuffer, 
           qRcvdUnacked, qRcvdAcked, outBatchSize, qEmpty, pc, nextEvent, uid, 
           inmsg, ack >>

ProcSet == {"outbounder"} \cup {"inbounder"} \cup {"jmsSource"}

Init == (* Global variables *)
        /\ qSource = << >>
        /\ qSentUnacked = << >>
        /\ ackChan = << >>
        /\ qSentAcked = << >>
        /\ qRingBuffer = << >>
        /\ qRcvdUnacked = << >>
        /\ qRcvdAcked = << >>
        /\ outBatchSize = 4
        /\ qEmpty = << >>
        (* Process Outbounder *)
        /\ nextEvent = defaultInitValue
        (* Process JMSSource *)
        /\ uid = 1
        /\ inmsg = defaultInitValue
        /\ ack = defaultInitValue
        /\ pc = [self \in ProcSet |-> CASE self = "outbounder" -> "ob1"
                                        [] self = "inbounder" -> "ib1"
                                        [] self = "jmsSource" -> "js1"]

ob1 == /\ pc["outbounder"] = "ob1"
       /\ Len(qRingBuffer) > 0
       /\ nextEvent' = Head(qRingBuffer)
       /\ IF nextEvent'[1] < 0
             THEN /\ PrintT(<<"OUTBOUNDER: BAD_PARSE ++++++++++">>)
                  /\ qRingBuffer' = Tail(qRingBuffer)
                  /\ ackChan' = Append(ackChan, nextEvent'[1])
                  /\ pc' = [pc EXCEPT !["outbounder"] = "ob1"]
                  /\ UNCHANGED qRcvdUnacked
             ELSE /\ qRcvdUnacked' = Append(qRcvdUnacked, Head(qRingBuffer))
                  /\ qRingBuffer' = Tail(qRingBuffer)
                  /\ pc' = [pc EXCEPT !["outbounder"] = "ob2"]
                  /\ UNCHANGED ackChan
       /\ UNCHANGED << qSource, qSentUnacked, qSentAcked, qRcvdAcked, 
                       outBatchSize, qEmpty, uid, inmsg, ack >>

ob2 == /\ pc["outbounder"] = "ob2"
       /\ IF ((nextEvent[1]) % outBatchSize) = 0
             THEN /\ ackChan' = SendAcks(ackChan, qRcvdUnacked)
                  /\ qRcvdAcked' = AppendAll(qRcvdAcked, qRcvdUnacked)
                  /\ qRcvdUnacked' = << >>
                  /\ PrintT(<<"qsource:", Len(qSource), "qSentAcked", Len(qSentAcked), "qRcvdAcked", Len(qRcvdAcked')>>)
                  /\ Assert(\A idx \in 1..Len(qRcvdAcked') : (qRcvdAcked'[idx][1] = idx), 
                            "Failure of assertion at line 86, column 15.")
             ELSE /\ TRUE
                  /\ UNCHANGED << ackChan, qRcvdUnacked, qRcvdAcked >>
       /\ pc' = [pc EXCEPT !["outbounder"] = "ob1"]
       /\ UNCHANGED << qSource, qSentUnacked, qSentAcked, qRingBuffer, 
                       outBatchSize, qEmpty, nextEvent, uid, inmsg, ack >>

Outbounder == ob1 \/ ob2

ib1 == /\ pc["inbounder"] = "ib1"
       /\ Len(qSource) > 0 /\ Len(qRingBuffer) < RingBufSz
       /\ IF (RingBufSz - Len(qRingBuffer)) >= Len(qSentUnacked)
             THEN /\ qSentUnacked' = AppendAll(qSentUnacked, qSource)
                  /\ qRingBuffer' = AppendAll(qRingBuffer, qSource)
                  /\ qSource' = << >>
             ELSE /\ qSentUnacked' = Append(qSentUnacked, Head(qSource))
                  /\ qRingBuffer' = Append(qRingBuffer, Head(qSource))
                  /\ qSource' = Tail(qSource)
       /\ pc' = [pc EXCEPT !["inbounder"] = "ib1"]
       /\ UNCHANGED << ackChan, qSentAcked, qRcvdUnacked, qRcvdAcked, 
                       outBatchSize, qEmpty, nextEvent, uid, inmsg, ack >>

Inbounder == ib1

js1 == /\ pc["jmsSource"] = "js1"
       /\ \/ /\ \E msg \in Msg:
                  /\ qSource' = Append(qSource, <<uid, msg>>)
                  /\ uid' = uid + 1
             /\ UNCHANGED <<qSentUnacked, ackChan, qSentAcked, inmsg, ack>>
          \/ /\ \E msg \in Msg:
                  /\ (uid % 4 = 0)
                  /\ qSource' = Append(qSource, <<-100, msg>>)
             /\ UNCHANGED <<qSentUnacked, ackChan, qSentAcked, uid, inmsg, ack>>
          \/ /\ Len(ackChan) > 0
             /\ ack' = Head(ackChan)
             /\ ackChan' = Tail(ackChan)
             /\ inmsg' = Head(qSentUnacked)
             /\ Assert(ack' = inmsg'[1] \/ ack' < 0, 
                       "Failure of assertion at line 139, column 13.")
             /\ qSentAcked' = Append(qSentAcked, Head(qSentUnacked))
             /\ qSentUnacked' = Tail(qSentUnacked)
             /\ UNCHANGED <<qSource, uid>>
       /\ pc' = [pc EXCEPT !["jmsSource"] = "js1"]
       /\ UNCHANGED << qRingBuffer, qRcvdUnacked, qRcvdAcked, outBatchSize, 
                       qEmpty, nextEvent >>

JMSSource == js1

Next == Outbounder \/ Inbounder \/ JMSSource

Spec == Init /\ [][Next]_vars

\* END TRANSLATION


=================================================================
